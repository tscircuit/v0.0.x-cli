import { AppContext } from "../../util/app-context"
import { z } from "zod"
import {
  readFileSync,
  writeFileSync,
  existsSync,
  mkdirSync,
  writeFile,
  appendFileSync,
} from "fs"
import * as Path from "node:path"
import $ from "dax-sh"
import { getGeneratedReadme } from "./get-generated-readme"
import { getGeneratedTsconfig } from "./get-generated-tsconfig"
import { getGeneratedNpmrc } from "./get-generated-npmrc"
import { createOrModifyNpmrc } from "./create-or-modify-npmrc"
import prompts from "prompts"

export const initCmd = async (ctx: AppContext, args: any) => {
  const params = z
    .object({
      name: z.string().optional(),
      dir: z.string().optional(),
      runtime: z.enum(["bun", "node"]).optional(),
    })
    .parse(args)

  if (params.name && !params.dir) {
    params.dir = `./${params.name.split("/").pop()}`
  } else if (!params.dir) {
    params.dir = `.`
  }

  if (!params.name) {
    try {
      const myAccount = await ctx.axios
        .get("/accounts/get")
        .then((r) => r.data.account)
      let subName = Path.basename(params.dir)
      if (subName === ".") {
        subName = Path.basename(Path.resolve(params.dir))
      }
      params.name = `@tsci/${myAccount.github_username}.${subName}`
    } catch (e: any) {
      const { github_username, package_name } = await prompts([
        { type: "text", name: "github_username", message: "GitHub username" },
        { type: "text", name: "package_name", message: "Package name" },
      ])
      params.name = `@tsci/${github_username}.${package_name}`
    }
  }

  let runtime = params.runtime ?? ctx.runtime
  if (!runtime) {
    const bunExists = $.commandExistsSync("bun")

    if (bunExists) {
      runtime = "bun"
    } else {
      runtime = "node"
    }
  }

  const pkm = runtime === "bun" ? "bun" : "npm"
  const runner = runtime === "bun" ? "bun" : "tsx"

  const packageJsonExists = existsSync(Path.join(params.dir, "package.json"))
  const dirExists = existsSync(params.dir)

  if (!dirExists) {
    console.log(`Creating directory ${params.dir}`)
    mkdirSync(params.dir, { recursive: true })
  }

  process.chdir(params.dir)
  if (!packageJsonExists) {
    console.log(`Initializing ${pkm} project...`)
    await $`${pkm} init -y`
  }

  if (runtime !== "bun") {
    console.log(`Setting up project for typescript...`)
    await $`${pkm} add -D typescript tsx`
  }

  // TODO just allow adding "tscircuit" in the future
  await $`${pkm} add -D tscircuit`

  console.log("Changing package name...")
  // Change package.json "name" to params.name
  const packageJson = JSON.parse(readFileSync("package.json", "utf-8"))
  packageJson.name = params.name
  writeFileSync("package.json", JSON.stringify(packageJson, null, 2))

  console.log('Changing adding "start" and "dev" scripts...')
  packageJson.scripts ??= {}
  packageJson.scripts.start = "npm run dev"
  packageJson.scripts.dev = "tsci dev"
  packageJson.scripts.build = "tsup ./index.ts --sourcemap --dts"
  writeFileSync("package.json", JSON.stringify(packageJson, null, 2))

  console.log('Making package type: "module"...')
  packageJson.type = "module"
  writeFileSync("package.json", JSON.stringify(packageJson, null, 2))

  console.log(`Adding ".tscircuit" to .gitignore`)
  appendFileSync(".gitignore", "\n.tscircuit\n*.__tmp_entrypoint.tsx\ndist\nnode_modules\n", {
    encoding: "utf-8",
    flag: "a+",
  })

  console.log("Add .npmrc with tscircuit registry...")
  await createOrModifyNpmrc({ quiet: false }, ctx)

  console.log("Creating lib and examples directories...")
  mkdirSync("examples", { recursive: true })
  mkdirSync("lib", { recursive: true })

  writeFileSync(
    Path.join("lib", "MyCircuit.manual-edits.ts"),
    `
/**
 * DO NOT EDIT THIS FILE DIRECTLY!
 *
 * This file is automatically edited when running \`tsci dev\` and dragging things
 * around. \`tsci dev\` searches for a file named "*.manual-edits.ts" and edits
 * it when you e.g. move a footprint. If there are multiple files, it'll try
 * to pick one based on context or ask.
 *
 * If you're not running \`tsci dev\`, you can safely edit this file.
 */
export default {
  // Generated when this file is created, this unique identifier is used to help
  // determine which file to edit when there are many *.manual-edits.ts files
  manual_edit_id: "abcdef",

  // Manual pcb placements, added when you drag a footprint
  pcb_placements: [],
}
`.trim()
  )

  writeFileSync(
    Path.join("lib", "MyCircuit.tsx"),
    `
  import { layout } from "tscircuit"
  import manual_edits from "./MyCircuit.manual-edits"

  export const MyCircuit = () => (
    <group layout={layout().manualEdits(manual_edits)}>
      <resistor
        resistance="10kohm"
        name="R1"
        footprint="0805"
      />
    </group>
  )
  `.trim()
  )

  writeFileSync("index.ts", `export * from "./lib/MyCircuit"`)

  writeFileSync(
    Path.join("examples", "MyExample.tsx"),
    `
import { MyCircuit } from "lib/MyCircuit"

export const MyExample = () => (
  <board width="40mm" height="40mm" pcbCenterX={0} pcbCenterY={0}>
    <MyCircuit />
  </board>
)
      `.trim()
  )

  // Override the README file
  writeFileSync(
    "README.md",
    getGeneratedReadme({
      name: params.name!,
      shouldHaveProjectGeneratedNotice: true,
    })
  )

  // Open tsconfig.json and modify it to import the tscircuit types
  writeFileSync("tsconfig.json", getGeneratedTsconfig())

  console.log("Done! Run `tsci dev` to start developing!")
}
